# 51. Manual Scheduling

- kubectl get pods
- curl --header "Content-Type:application/json" --request POST --data '{"apiVersion":"v1", "kind":"Binding"}' http://$SERVER/api/v1/namespaces/default/pods/$PODNAME/binding/

# 53. Solution - Manual Scheduling (optional)

- kubectl -n kube-system get pods

# 54. Labels and Selectors

- kubectl get pods --selector app=App1

# 56. Solution : Labels and Selectors : (Optional)

- kubectl get pods --show-labels
- kubectl get pods -l env=dev
- kubectl get pods -l env=dev --no-headers | wc -l

- kubectl get pods --selector env=dev
- kubectl get pods --selector env=dev | wc -l

- kubectl get all -l env=prod
- kubectl get all -l env=prod --no-headers
- kubectl get all -l env=prod --no-headers | wc -l

- kubectl get pods -l env=prod,bu=finance,tier=frontend

# 57. Taints and Tolerations

- kubectl taint nodes node-name key=value:taint-effect
    - NoSchedule | PreferNoSchedule | NoExecute
- kubectl tain nodes node1 app=blue:NoSchedule
- kubectl describe node kubemaster | grep Taint

# 59. Solution - Taints and Tolerations (Optional)

- kubectl get nodes --no-headers | wc -l

- kubectl describe node node01
- kubectl describe node node01 | grep Taints
- kubectl describe node node01 | grep -i taint

- kubectl taint nodes node01 spray=mortein:NoSchedule

- kubectl run mosquito --image=nginx
- kubectl run mosquito --image=nginx --restart=Never

- kubectl run bee --image=nginx --dry=run -o yaml > pod.yaml
- kubectl run bee --image=nginx --restart=Never --dry=run -o yaml > pod.yaml
- kubectl explain pod --recursive | less 
- kubectl explain pod --recursive | grep -A5 tolerations 

- kubectl get pods -o wide

- kubectl describe nodes master | grep -i taint

--> Eliminate the taint in a Node
- kubectl taint node master node-role.kubernetes.io/master:NoSchedule-

- kubectl describe node controlplane | grep Taints

- kubectl edit node controlplane

# 60. Node Selectors

- kubectl label nodes <node-name> <label-key>=<label-value>
- kubectl label nodes node-1 size=Large
- kubectl create -f pod-definiton03.yaml

Node Affinity Types:
- requiredDuringSchedulingIgnoredDuringExecution
- preferredDuringSchedulingIgnoredDuringExecution
- requiredDuringSchedulingRequiredDuringExecution

# 63. Solution - Node Affinity (Optional)

- kubectl describe node node01
- kubectl get nodes node01 --show-labels
- kubectl label nodes node01 color=blue
- kubectl create deployment blue --image=nginx --replicas=3
- kubectl get pods -o wide

- kubectl get deployments.apps blue -o yaml > blue.yaml
- kubectl get deployment blue -o yaml > blue.yaml

- kubectl create deployment red --image=nginx --replicas=2 --dry-run=client -o yaml > red.yaml
- kubectl get pods -o wide | grep red

# 65. Resource Requirements and Limits

# 66. Note on default resource requirements and limits
In the previous lecture, I said - "When a pod is created the containers are
assigned a default CPU request of .5 and memory of 256Mi".
For the POD to pick up those defaults you must have first set those as 
default values for request and limit by creating a LimitRange in that namespace.

##SAMPLE1##
apiVersion: v1
kind: LimitRange
metadata:
  name: mem-limit-range
spec:
  limits:
  - default:
      memory: 512Mi
    defaultRequest:
      memory: 256Mi
    type: Container


##SAMPLE2##
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-limit-range
spec:
  limits:
  - default:
      cpu: 1
    defaultRequest:
      cpu: 0.5
    type: Container

# 67. A quick note on editing PODs and Deployments

- kubectl edit pod <pod name>
- kubectl delete pod webapp
- kubectl create -f /tmp/kubectl-edit-ccvrq.yaml

- kubectl get pod webapp -o yaml > my-new-pod.yaml
- vi my-new-pod.yaml
- kubectl delete pod webapp
- kubectl create -f my-new-pod.yaml

- kubectl edit deployment my-deployment

# 69. Solution: Resource Limits : (Optional)

- kubectl describe pod rabbit
- kubectl delete pod rabbit

# 70. DaemonSets

- kubectl get deamontsets
- kubectl describe deamonsets monitoring-deamon

# 72. Solution - DaemonSets (optional)

- kubectl get daemonsets --all-namespaces
- kubectl get ds --all-namespaces
- kubectl describe daemonsets kube-proxy -n kube-system
- kubectl -n kube-system describe ds weave-net | grep -i image
- kubectl get pods -n kube-system -o wide
- kubectl describe pod kube-flannel-ds-lv7fn -n kube-system

- kubectl create deployment elasticsearch --image=k8s.gcr.io/fluentd-elasticsearch:1.20 --namespace=kube-system -o yaml > fluentd.yaml